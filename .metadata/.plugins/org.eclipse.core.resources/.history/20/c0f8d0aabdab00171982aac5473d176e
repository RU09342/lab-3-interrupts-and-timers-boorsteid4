//***************************************************************************************
// LAB 3: INTERRUPTS AND TIMERS
//
// MSP430F5529 Button-Based Delay
//
// Description: Toggle P1.0 and P4.7 by xor'ing them inside of a software loop.
//              Port 2 interrupt starts/stops blink on P1.0, Port 1 on P4.7
// ACLK = n/a, MCLK = SMCLK = default DCO
//
//           MSP430F5529
//           -----------
//        /|\|      XIN|-
//         | |         |
//         --|RST  XOUT|-
// Button1-->|P2.1 P1.0|-->LED1
// Button2-->|P1.1 P4.7|-->LED2
//
// Damon Boorstein
// Rowan University
// Date Created: September 25, 2017
// Date Updated: October 1, 2017
//
// Original Program by
// Aldo Briano
// Texas Instruments, Inc
// June 2010
//
// Built with Code Composer Studio v7.2.0
//***************************************************************************************
#include <msp430f5529.h>


#define LED1        BIT0
#define LED2        BIT7
#define LED1_OUT    P1OUT
#define LED2_OUT    P4OUT
#define LED1_DIR    P1DIR
#define LED2_DIR    P4DIR
#define BUTTON      BIT1


void main(void)
{
    WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer

    LED1_DIR |= LED1; // Set P1.0
    LED2_DIR |= LED2; // and P4.7 to output direction
    LED1_OUT &= ~LED1; // Clear the LEDs
    LED2_OUT &= ~LED2;
    P2REN |= BUTTON; // Enable a puller-resistor on the button-pin
    P1REN |= BUTTON;
    P2OUT |= BUTTON; // Tell the resistor to pull up
    P1OUT |= BUTTON;

    P2IFG &= ~BUTTON; // Clear P2
    P1IFG &= ~BUTTON; // and P1 interrupt flags
    P2IES |= BUTTON; // Triggers when you PRESS the button
    P2IE |= BUTTON; // Mask interrupts for the button-pin only
    P1IES |= BUTTON;
    P1IE |= BUTTON;


    TA0CCR0 = 25000;
    TA0CCTL0 |= CCIE;
    TA0CTL |= TASSEL_2 + MC_1 + ID_1; // Set the timer A to SMCLCK/2, Up
    TA0R |= TACLR; // Clear Timer A0 reg
                   // Do after setting ID or TAIDEX bits so timer clock starts correct immediately

    __enable_interrupt(); // Clear timer, enable interrupts.

    __bis_SR_register(LPM0 + GIE); // LPM0 with interrupts enabled

}

// Port 2 interrupt service routine
#pragma vector = PORT2_VECTOR
__interrupt void Port_2(void)
{
    TA0CCTL0 |= CAP;
    LED1_OUT &= ~LED1;
    LED2_OUT &= ~LED2;
    if(P2IN & BUTTON)
    {
        P2IFG &= ~BUTTON;
        TA0CCTL0 &= ~(CCIFG + CAP);
//        TA0CCTL0 |= CCIE;
        TACTL |= TAIE;
    }
}

// Timer A0 interrupt service routine
#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A0 (void)
{
    LED1_OUT ^= LED1;
    LED2_OUT ^= LED2;
}

